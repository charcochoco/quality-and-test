name: Test
concurrency: production

on:
  push:
    branches: [ playwright ]
  pull_request:
    branches: [ playwright ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm' # Cache npm dependencies

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run tests jest with Coverage
        run: npm run test:unit -- --coverage
      
      - name: ⚙️ Generating coverage badges
        uses: jpb06/coverage-badges-action@latest
        with:
          branches: playwright  # Générer des badges uniquement pour la branche 'playwright'
          target-branch: badges  # Pousser les badges vers la branche 'badges'
          coverage-summary-path: ./coverage/coverage-summary.json  # Spécifier le chemin du fichier de résumé de couverture
          badges-icon: vitest  # Icône des badges
          commit-message: "Update coverage badges"  # Message de commit pour les badges
          commit-user: "github-actions[bot]"  # Nom de l'utilisateur pour le commit
          commit-user-email: "github-actions[bot]@users.noreply.github.com"  # Email de l'utilisateur pour le commit

      - name: Commit Coverage Badges
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add coverage/badges/*
          if git diff --cached --quiet -- coverage/badges/*; then
            echo "No new badge changes"
          else
            git commit -m "Update coverage badges"
            git push origin badges  # Pousser les badges dans la branche 'badges'
          fi

      - name: Start server
        run: |
          nohup npm start &
          sleep 10 
        env:
          PORT: 3030  

      - name: Wait for server to be ready
        run: |
          for i in {1..10}; do
            curl --fail http://localhost:3030 || sleep 3
          done

      - name: Run tests playwright
        run: npm run test:e2e

      - name: Generate Playwright report
        run: npm run test:e2e:report

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/

      - name: Display test results
        if: failure() # This step runs only if the tests fail
        run: cat ./test-results.txt || echo "No test results file found"
